// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testVotes(t *testing.T) {
	t.Parallel()

	query := Votes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testVotesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = vote.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Votes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VoteSlice{vote}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testVotesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VoteExists(tx, vote.ID)
	if err != nil {
		t.Errorf("Unable to check if Vote exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoteExistsG to return true, but got false.")
	}
}
func testVotesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	voteFound, err := FindVote(tx, vote.ID)
	if err != nil {
		t.Error(err)
	}

	if voteFound == nil {
		t.Error("want a record, got nil")
	}
}
func testVotesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Votes(tx).Bind(vote); err != nil {
		t.Error(err)
	}
}

func testVotesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Votes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVotesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voteOne := &Vote{}
	voteTwo := &Vote{}
	if err = randomize.Struct(seed, voteOne, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err = randomize.Struct(seed, voteTwo, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = voteOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = voteTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Votes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVotesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voteOne := &Vote{}
	voteTwo := &Vote{}
	if err = randomize.Struct(seed, voteOne, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err = randomize.Struct(seed, voteTwo, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = voteOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = voteTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func voteBeforeInsertHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterInsertHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterSelectHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeUpdateHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterUpdateHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeDeleteHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterDeleteHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeUpsertHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterUpsertHook(e boil.Executor, o *Vote) error {
	*o = Vote{}
	return nil
}

func testVotesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Vote{}
	o := &Vote{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Vote object: %s", err)
	}

	AddVoteHook(boil.BeforeInsertHook, voteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voteBeforeInsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterInsertHook, voteAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voteAfterInsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterSelectHook, voteAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voteAfterSelectHooks = []VoteHook{}

	AddVoteHook(boil.BeforeUpdateHook, voteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voteBeforeUpdateHooks = []VoteHook{}

	AddVoteHook(boil.AfterUpdateHook, voteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voteAfterUpdateHooks = []VoteHook{}

	AddVoteHook(boil.BeforeDeleteHook, voteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voteBeforeDeleteHooks = []VoteHook{}

	AddVoteHook(boil.AfterDeleteHook, voteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voteAfterDeleteHooks = []VoteHook{}

	AddVoteHook(boil.BeforeUpsertHook, voteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voteBeforeUpsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterUpsertHook, voteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voteAfterUpsertHooks = []VoteHook{}
}
func testVotesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVotesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx, voteColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVotesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = vote.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVotesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VoteSlice{vote}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testVotesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Votes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voteDBTypes = map[string]string{`CreatedAt`: `datetime`, `ID`: `int`, `OptionID`: `int`, `UpdatedAt`: `datetime`, `Voter`: `varchar`, `Ynm`: `char`}
	_           = bytes.MinRead
)

func testVotesUpdate(t *testing.T) {
	t.Parallel()

	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	if err = vote.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVotesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	vote := &Vote{}
	if err = randomize.Struct(seed, vote, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, vote, voteDBTypes, true, votePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voteColumns, votePrimaryKeyColumns) {
		fields = voteColumns
	} else {
		fields = strmangle.SetComplement(
			voteColumns,
			votePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(vote))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VoteSlice{vote}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testVotesUpsert(t *testing.T) {
	t.Parallel()

	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	vote := Vote{}
	if err = randomize.Struct(seed, &vote, voteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vote.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Vote: %s", err)
	}

	count, err := Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &vote, voteDBTypes, false, votePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	if err = vote.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Vote: %s", err)
	}

	count, err = Votes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

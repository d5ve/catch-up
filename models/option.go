// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Option is an object representing the database table.
type Option struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CatchupID int       `boil:"catchup_id" json:"catchup_id" toml:"catchup_id" yaml:"catchup_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Date      time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *optionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L optionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OptionColumns = struct {
	ID        string
	CatchupID string
	CreatedAt string
	UpdatedAt string
	Date      string
}{
	ID:        "id",
	CatchupID: "catchup_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Date:      "date",
}

// optionR is where relationships are stored.
type optionR struct {
}

// optionL is where Load methods for each relationship are stored.
type optionL struct{}

var (
	optionColumns               = []string{"id", "catchup_id", "created_at", "updated_at", "date"}
	optionColumnsWithoutDefault = []string{"catchup_id", "created_at", "updated_at", "date"}
	optionColumnsWithDefault    = []string{"id"}
	optionPrimaryKeyColumns     = []string{"id"}
)

type (
	// OptionSlice is an alias for a slice of pointers to Option.
	// This should generally be used opposed to []Option.
	OptionSlice []*Option
	// OptionHook is the signature for custom Option hook methods
	OptionHook func(boil.Executor, *Option) error

	optionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	optionType                 = reflect.TypeOf(&Option{})
	optionMapping              = queries.MakeStructMapping(optionType)
	optionPrimaryKeyMapping, _ = queries.BindMapping(optionType, optionMapping, optionPrimaryKeyColumns)
	optionInsertCacheMut       sync.RWMutex
	optionInsertCache          = make(map[string]insertCache)
	optionUpdateCacheMut       sync.RWMutex
	optionUpdateCache          = make(map[string]updateCache)
	optionUpsertCacheMut       sync.RWMutex
	optionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var optionBeforeInsertHooks []OptionHook
var optionBeforeUpdateHooks []OptionHook
var optionBeforeDeleteHooks []OptionHook
var optionBeforeUpsertHooks []OptionHook

var optionAfterInsertHooks []OptionHook
var optionAfterSelectHooks []OptionHook
var optionAfterUpdateHooks []OptionHook
var optionAfterDeleteHooks []OptionHook
var optionAfterUpsertHooks []OptionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Option) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range optionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Option) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range optionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Option) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range optionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Option) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range optionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Option) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range optionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Option) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range optionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Option) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range optionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Option) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range optionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Option) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range optionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOptionHook registers your hook function for all future operations.
func AddOptionHook(hookPoint boil.HookPoint, optionHook OptionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		optionBeforeInsertHooks = append(optionBeforeInsertHooks, optionHook)
	case boil.BeforeUpdateHook:
		optionBeforeUpdateHooks = append(optionBeforeUpdateHooks, optionHook)
	case boil.BeforeDeleteHook:
		optionBeforeDeleteHooks = append(optionBeforeDeleteHooks, optionHook)
	case boil.BeforeUpsertHook:
		optionBeforeUpsertHooks = append(optionBeforeUpsertHooks, optionHook)
	case boil.AfterInsertHook:
		optionAfterInsertHooks = append(optionAfterInsertHooks, optionHook)
	case boil.AfterSelectHook:
		optionAfterSelectHooks = append(optionAfterSelectHooks, optionHook)
	case boil.AfterUpdateHook:
		optionAfterUpdateHooks = append(optionAfterUpdateHooks, optionHook)
	case boil.AfterDeleteHook:
		optionAfterDeleteHooks = append(optionAfterDeleteHooks, optionHook)
	case boil.AfterUpsertHook:
		optionAfterUpsertHooks = append(optionAfterUpsertHooks, optionHook)
	}
}

// OneP returns a single option record from the query, and panics on error.
func (q optionQuery) OneP() *Option {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single option record from the query.
func (q optionQuery) One() (*Option, error) {
	o := &Option{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for option")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Option records from the query, and panics on error.
func (q optionQuery) AllP() OptionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Option records from the query.
func (q optionQuery) All() (OptionSlice, error) {
	var o []*Option

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Option slice")
	}

	if len(optionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Option records in the query, and panics on error.
func (q optionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Option records in the query.
func (q optionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count option rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q optionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q optionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if option exists")
	}

	return count > 0, nil
}

// OptionsG retrieves all records.
func OptionsG(mods ...qm.QueryMod) optionQuery {
	return Options(boil.GetDB(), mods...)
}

// Options retrieves all the records using an executor.
func Options(exec boil.Executor, mods ...qm.QueryMod) optionQuery {
	mods = append(mods, qm.From("`option`"))
	return optionQuery{NewQuery(exec, mods...)}
}

// FindOptionG retrieves a single record by ID.
func FindOptionG(id int, selectCols ...string) (*Option, error) {
	return FindOption(boil.GetDB(), id, selectCols...)
}

// FindOptionGP retrieves a single record by ID, and panics on error.
func FindOptionGP(id int, selectCols ...string) *Option {
	retobj, err := FindOption(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOption(exec boil.Executor, id int, selectCols ...string) (*Option, error) {
	optionObj := &Option{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `option` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(optionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from option")
	}

	return optionObj, nil
}

// FindOptionP retrieves a single record by ID with an executor, and panics on error.
func FindOptionP(exec boil.Executor, id int, selectCols ...string) *Option {
	retobj, err := FindOption(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Option) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Option) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Option) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Option) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no option provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(optionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	optionInsertCacheMut.RLock()
	cache, cached := optionInsertCache[key]
	optionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			optionColumns,
			optionColumnsWithDefault,
			optionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(optionType, optionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(optionType, optionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `option` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `option` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `option` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, optionPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into option")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == optionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for option")
	}

CacheNoHooks:
	if !cached {
		optionInsertCacheMut.Lock()
		optionInsertCache[key] = cache
		optionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Option record. See Update for
// whitelist behavior description.
func (o *Option) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Option record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Option) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Option, and panics on error.
// See Update for whitelist behavior description.
func (o *Option) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Option.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Option) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	optionUpdateCacheMut.RLock()
	cache, cached := optionUpdateCache[key]
	optionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			optionColumns,
			optionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update option, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `option` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, optionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(optionType, optionMapping, append(wl, optionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update option row")
	}

	if !cached {
		optionUpdateCacheMut.Lock()
		optionUpdateCache[key] = cache
		optionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q optionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q optionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for option")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OptionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OptionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OptionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OptionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `option` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, optionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in option slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Option) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Option) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Option) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Option) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no option provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(optionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	optionUpsertCacheMut.RLock()
	cache, cached := optionUpsertCache[key]
	optionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			optionColumns,
			optionColumnsWithDefault,
			optionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			optionColumns,
			optionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert option, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "option", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `option` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(optionType, optionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(optionType, optionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for option")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == optionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for option")
	}

CacheNoHooks:
	if !cached {
		optionUpsertCacheMut.Lock()
		optionUpsertCache[key] = cache
		optionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Option record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Option) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Option record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Option) DeleteG() error {
	if o == nil {
		return errors.New("models: no Option provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Option record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Option) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Option record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Option) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Option provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), optionPrimaryKeyMapping)
	sql := "DELETE FROM `option` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from option")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q optionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q optionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no optionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from option")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OptionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OptionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Option slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OptionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OptionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Option slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(optionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `option` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, optionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from option slice")
	}

	if len(optionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Option) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Option) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Option) ReloadG() error {
	if o == nil {
		return errors.New("models: no Option provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Option) Reload(exec boil.Executor) error {
	ret, err := FindOption(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OptionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OptionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OptionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OptionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OptionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	options := OptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `option`.* FROM `option` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, optionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&options)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OptionSlice")
	}

	*o = options

	return nil
}

// OptionExists checks if the Option row exists.
func OptionExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `option` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if option exists")
	}

	return exists, nil
}

// OptionExistsG checks if the Option row exists.
func OptionExistsG(id int) (bool, error) {
	return OptionExists(boil.GetDB(), id)
}

// OptionExistsGP checks if the Option row exists. Panics on error.
func OptionExistsGP(id int) bool {
	e, err := OptionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OptionExistsP checks if the Option row exists. Panics on error.
func OptionExistsP(exec boil.Executor, id int) bool {
	e, err := OptionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

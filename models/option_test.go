// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testOptions(t *testing.T) {
	t.Parallel()

	query := Options(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = option.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Options(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OptionSlice{option}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OptionExists(tx, option.ID)
	if err != nil {
		t.Errorf("Unable to check if Option exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OptionExistsG to return true, but got false.")
	}
}
func testOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	optionFound, err := FindOption(tx, option.ID)
	if err != nil {
		t.Error(err)
	}

	if optionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Options(tx).Bind(option); err != nil {
		t.Error(err)
	}
}

func testOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Options(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	optionOne := &Option{}
	optionTwo := &Option{}
	if err = randomize.Struct(seed, optionOne, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}
	if err = randomize.Struct(seed, optionTwo, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = optionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = optionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Options(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	optionOne := &Option{}
	optionTwo := &Option{}
	if err = randomize.Struct(seed, optionOne, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}
	if err = randomize.Struct(seed, optionTwo, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = optionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = optionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func optionBeforeInsertHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionAfterInsertHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionAfterSelectHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionBeforeUpdateHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionAfterUpdateHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionBeforeDeleteHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionAfterDeleteHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionBeforeUpsertHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func optionAfterUpsertHook(e boil.Executor, o *Option) error {
	*o = Option{}
	return nil
}

func testOptionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Option{}
	o := &Option{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, optionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Option object: %s", err)
	}

	AddOptionHook(boil.BeforeInsertHook, optionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	optionBeforeInsertHooks = []OptionHook{}

	AddOptionHook(boil.AfterInsertHook, optionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	optionAfterInsertHooks = []OptionHook{}

	AddOptionHook(boil.AfterSelectHook, optionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	optionAfterSelectHooks = []OptionHook{}

	AddOptionHook(boil.BeforeUpdateHook, optionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	optionBeforeUpdateHooks = []OptionHook{}

	AddOptionHook(boil.AfterUpdateHook, optionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	optionAfterUpdateHooks = []OptionHook{}

	AddOptionHook(boil.BeforeDeleteHook, optionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	optionBeforeDeleteHooks = []OptionHook{}

	AddOptionHook(boil.AfterDeleteHook, optionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	optionAfterDeleteHooks = []OptionHook{}

	AddOptionHook(boil.BeforeUpsertHook, optionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	optionBeforeUpsertHooks = []OptionHook{}

	AddOptionHook(boil.AfterUpsertHook, optionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	optionAfterUpsertHooks = []OptionHook{}
}
func testOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx, optionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = option.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OptionSlice{option}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Options(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	optionDBTypes = map[string]string{`CatchupID`: `int`, `CreatedAt`: `datetime`, `Date`: `datetime`, `ID`: `int`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testOptionsUpdate(t *testing.T) {
	t.Parallel()

	if len(optionColumns) == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err = option.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(optionColumns) == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	option := &Option{}
	if err = randomize.Struct(seed, option, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, option, optionDBTypes, true, optionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(optionColumns, optionPrimaryKeyColumns) {
		fields = optionColumns
	} else {
		fields = strmangle.SetComplement(
			optionColumns,
			optionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(option))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OptionSlice{option}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOptionsUpsert(t *testing.T) {
	t.Parallel()

	if len(optionColumns) == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	option := Option{}
	if err = randomize.Struct(seed, &option, optionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = option.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Option: %s", err)
	}

	count, err := Options(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &option, optionDBTypes, false, optionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err = option.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Option: %s", err)
	}

	count, err = Options(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
